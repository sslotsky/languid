// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Jest              = require("bs-jest/src/jest.js");
var List              = require("bs-platform/lib/js/list.js");
var Block             = require("bs-platform/lib/js/block.js");
var Lexing            = require("bs-platform/lib/js/lexing.js");
var Lexer$Slangwidge  = require("../src/lexer.bs.js");
var Parser$Slangwidge = require("../src/parser.bs.js");

describe("Parser", (function () {
        describe("blank script", (function () {
                var lexbuf = Lexing.from_string("");
                var commands = Parser$Slangwidge.prog(Lexer$Slangwidge.read, lexbuf);
                return Jest.test("returns an empty list", (function () {
                              return Jest.Expect[/* toBe */2](0, Jest.Expect[/* expect */0](List.length(commands)));
                            }));
              }));
        describe("basic script", (function () {
                var lexbuf = Lexing.from_string("\n    walk up\n    shoot right\n    listen 'mock' do\n      shoot left\n    end\n\n    send judy 'my notice'\n  ");
                var commands = Parser$Slangwidge.prog(Lexer$Slangwidge.read, lexbuf);
                Jest.test("parses all commands", (function () {
                        return Jest.Expect[/* toBe */2](4, Jest.Expect[/* expect */0](List.length(commands)));
                      }));
                Jest.test("parses the walk command", (function () {
                        return Jest.Expect[/* toEqual */12](/* Now */Block.__(0, [/* Walk */Block.__(0, [/* Up */0])]), Jest.Expect[/* expect */0](List.nth(commands, 0)));
                      }));
                Jest.test("parses the shoot command", (function () {
                        return Jest.Expect[/* toEqual */12](/* Turn */Block.__(1, [/* Shoot */Block.__(1, [/* Right */3])]), Jest.Expect[/* expect */0](List.nth(commands, 1)));
                      }));
                Jest.test("parses the listen command", (function () {
                        return Jest.Expect[/* toEqual */12](/* Now */Block.__(0, [/* Listen */Block.__(1, [
                                          "mock",
                                          /* :: */[
                                            /* Turn */Block.__(1, [/* Shoot */Block.__(1, [/* Left */2])]),
                                            /* [] */0
                                          ]
                                        ])]), Jest.Expect[/* expect */0](List.nth(commands, 2)));
                      }));
                return Jest.test("parses the send command", (function () {
                              return Jest.Expect[/* toEqual */12](/* Now */Block.__(0, [/* Send */Block.__(2, [
                                                "judy",
                                                "my notice"
                                              ])]), Jest.Expect[/* expect */0](List.nth(commands, 3)));
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
